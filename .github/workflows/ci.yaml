name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  DATABASE_URL: "postgres://ci:ci@localhost:5432/ci?sslmode=disable"
  PIPENV_VENV_IN_PROJECT: "1"
  PYTHONPATH: "src"
  TEST_SERVICE_URL: "http://localhost:8000"

jobs:
  setup-services:
    needs:
      - build
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.9 ]
    runs-on: ${{ matrix.os }}
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ci
          POSTGRES_PASSWORD: ci
          POSTGRES_USER: ci
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-retries 5
          --health-timeout 5s
    steps:
      - name: perform release steps
        env:
          PGPASSFILE: config/.pgpass
        run: |
          chmod 0600 config/.pgpass
          make initdb release
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.9 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: pull code from repo
        uses: actions/checkout@v2
      - name: set up runtime
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'
      - name: cache runtime
        id: cache-runtime
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('Pipfile.lock') }}
          restore-keys: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('Pipfile.lock') }}
      - name: install pipenv
        if: ${{ !steps.cache-runtime.outputs.cache-hit }}
        run: pip install pipenv
      - name: install python packages
        if: ${{ !steps.cache-runtime.outputs.cache-hit }}
        run: make venv-deploy-all
  run-server:
    needs:
      - build
      - setup-services
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.9 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: run production web server
        run: make run-prod &
  qa:
    needs:
      - build
      - setup-services
      - run-server
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.9 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: qa checks
        run: make qa
      - name: store coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: alpha-report-coverage-${{ matrix.python-version }}
          path: htmlcov
          retention-days: 4
          if: ${{ github.branch == 'main' }}
