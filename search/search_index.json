{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Alpha","text":"<p>Alpha is a template repository for building web projects.</p> <p>It includes:</p> <ol> <li> <p>Webapp</p> <p>The ASGI app, kind of \"Hello world\". It shows ASGI context and DB settings.</p> </li> <li> <p>Docs</p> <p>This service provides documentation for your project. It is a separate service, so you can either exclude it. Or, you can manage your own docs.</p> </li> <li> <p>DB</p> <p>PostgreSQL 15.1 included.</p> </li> <li> <p>DBA</p> <p>PgAdmin 6.20 included.</p> </li> <li> <p>Github CI</p> <p>There are workflows for webapp, docs, integration of services. Built images are available as artifacts.</p> </li> </ol>"},{"location":"dev/contributing/","title":"Contributing","text":""},{"location":"dev/contributing/#prerequisites","title":"Prerequisites","text":"<p>These items must be installed on your system.</p> <ol> <li>docker</li> </ol> <p>If you want to bypass docker-based development and use your own machine, make sure  that the following items are installed and are working on your machine.</p> <ol> <li>task</li> <li>poetry</li> <li>python with the right version.     Consider using pyenv     and <code>task</code> will do all stuff for you \u2014 see below.</li> <li>postgresql</li> </ol>"},{"location":"dev/contributing/#run-the-project","title":"Run the project","text":"<ol> <li><code>task docker-up</code></li> <li>open http://localhost:8000 for Webapp</li> <li>open http://localhost:8801 for PgAdmin</li> <li>open http://localhost:8802 for Docs</li> </ol>"},{"location":"dev/issues/","title":"Issues","text":""},{"location":"dev/issues/#rules","title":"Rules","text":"<p>Any issue MUST follow the rules:</p> <ol> <li>Each issue describes the future existence of something.</li> <li>Each issue must describe the need, the motivation of itself.</li> <li>Each issue must contain everything so anybody knows what do you want and how do you want it done.</li> <li>Each issue must have two roles: reporter and assignee, it does not matter if one person does cover two roles.</li> <li>Each non-raw issue must be labelled with estimation.</li> </ol>"},{"location":"dev/issues/#labels","title":"Labels","text":"<ol> <li><code>\ud83d\udd25 fire</code>: up to 1 hour</li> <li><code>\ud83d\udca8 air</code>: 10 hours (about a day)</li> <li><code>\ud83d\udca6 water</code>: 20 hours (2..3 days)</li> <li><code>\ud83c\udf0d earth</code>: 40 hours (a week)</li> </ol>"},{"location":"dev/pr/","title":"Commits, pull requests","text":""},{"location":"dev/pr/#format","title":"Format","text":"<p>Name pull request in the form of describing of the reality how it will be after your pull request.</p> <p>Consider:</p> <ul> <li>\"Project can be configured using ENVs\"</li> <li>\"Integration tests check that DB is visible for Webapp\"</li> <li>\"Packages are upgraded\"</li> </ul> <p>If the PR is linked to the issue, name it in the same way as issue is named.</p>"},{"location":"dev/pr/#integration","title":"Integration","text":"<p>Add <code>ci:integration</code> line to commit message to trigger <code>Integration</code> workflow.</p>"},{"location":"dev/services/","title":"Services","text":""},{"location":"dev/services/#webapp","title":"Webapp","text":""},{"location":"dev/services/#development-environment","title":"Development environment","text":"<p>Simply run <code>task</code> inside <code>/services/webapp/</code> directory.</p> <p>See other <code>task</code> commands, they are quite useful.</p>"},{"location":"dev/versioning/","title":"Versioning","text":"<p>The product version can be known from version.txt.</p> <p>This file is aimed to be the only source of project version.</p> <p>Version is managed by only maintainers.</p> <p>Version is labelled as a date of release.</p> <p>Docker images have tags with the exact versions.</p>"}]}